trigger:
- main

pool:
  vmImage: Azure Pipelines

variables:
  repository: "myimage"
  dockerfilePath: "$(Build.SourcesDirectory)/Dockerfile"
  tag: $(Build.BuildId)

steps:
  - task: Cache@2
    displayName: Cache task
    inputs:
      key: 'docker | "$(Agent.OS)" | cache3'
      path: $(Pipeline.Workspace)/docker
      cacheHitVar: CACHE_RESTORED #Variable to set to 'true' when the cache is restored

  - script: |
      ls $(Pipeline.Workspace)/docker/
      docker load -i $(Pipeline.Workspace)/docker/cache.tar
      # docker load -i $(Pipeline.Workspace)/docker/cache-dotnet-sdk.tar
    displayName: Docker restore
    condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

  # - script: |
  #     date
  #     docker pull mcr.microsoft.com/dotnet/aspnet:8.0
  #     docker pull mcr.microsoft.com/dotnet/sdk:8.0
  #     date
  #   displayName: Docker pull

  - task: Docker@2
    displayName: "Build Docker"
    inputs:
      command: "build"
      repository: $(repository)
      dockerfile: $(dockerfilePath)
      tags: |
        $(tag)

  - script: |
      mkdir -p $(Pipeline.Workspace)/docker
      docker save -o $(Pipeline.Workspace)/docker/cache.tar $(repository):$(tag)
      # docker pull mcr.microsoft.com/dotnet/sdk:8.0 || true
      # docker save -o $(Pipeline.Workspace)/docker/cache-dotnet-sdk.tar "mcr.microsoft.com/dotnet/sdk:8.0"
    displayName: Docker save
    condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'))

  # - script: |
  #     mkdir -p $(Pipeline.Workspace)/docker
  #     docker save -o $(Pipeline.Workspace)/docker/cache.tar $(repository):$(tag)
  #   displayName: Docker save
  #   condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'))
